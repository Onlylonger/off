---
import { getCollection } from "astro:content";
import Layout from "../../components/Layout.astro";
import { capitalizeFirstLetter, getUrl } from "../../utils";
import ProjectList from "../../components/ProjectList.astro";
import { isLocal, maxDescChars } from "../../consts";

const category: Record<string, any[]> = {};

(
  await getCollection("codeSnippet", ({ id }) => {
    const ids = id.split("/");
    return !ids[ids.length - 1].startsWith("_");
  })
)
  .sort(
    (a, b) =>
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
  )
  .map((v) => {
    // ['src','content','newBlogs', '2025']
    const pathnames = v.filePath?.split("/") || [];
    const cat = pathnames[3];

    const tmp = {
      title: isLocal ? `${v.data.title} - ${v.data.pubDate}` : v.data.title,
      id: v.id,
      description:
        v.data.description.length > maxDescChars
          ? `${v.data.description.slice(0, maxDescChars)}...`
          : v.data.description,
    };

    if (category[cat]) {
      category[cat].push(tmp);
    } else {
      category[cat] = [tmp];
    }

    return {
      ...v,
      cat,
    };
  });

const cats = ["react", "javascript"];
// const cats = Object.keys(category);
---

<Layout>
  <section>
    {
      cats.map((cat) => {
        const list = category[cat];
        return (
          <ProjectList
            title={capitalizeFirstLetter(cat)}
            list={list.map((post) => ({
              url: getUrl(`/snippet/${post.id}/`),
              label: post.title,
              description: post.description,
            }))}
            footerDesc="Try Snippet"
          />
        );
      })
    }
  </section>
</Layout>
